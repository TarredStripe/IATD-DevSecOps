name: Deploy

on: workflow_dispatch

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
      # Log into Azure
      - uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}
      - name: Install Cosign
        uses: sigstore/cosign-installer@v3.4.0

      - name: Verify image signature
        env:
          IMAGE: ${{ secrets.DOCKERHUB_USERNAME }}/devops-labs:latest
          GITHUB_ISSUER: https://github.com/login/oauth
          CERT_IDENTITY_REGEXP: julia.sinclairjones@studytafensw.edu.au
        run: |
          cosign verify $IMAGE --certificate-identity-regexp $CERT_IDENTITY_REGEXP --certificate-oidc-issuer $GITHUB_ISSUER
            
        # Deploy the app and DAST container app
      - name: Deploy Container App
        uses: azure/container-apps-deploy-action@v1
        with:
          imageToDeploy: ${{ secrets.DOCKERHUB_USERNAME }}/devops-labs:latest
          containerAppName: devops-app
          containerAppEnvironment: devops-app-env
          resourceGroup: devsecops-lab
          location: australiaeast
          targetPort: 5000

      - name: Deploy DAST Container App
        uses: azure/container-apps-deploy-action@v1
        with:
          imageToDeploy: ${{ secrets.DOCKERHUB_USERNAME }}/devops-labs:dast-test
          containerAppName: devops-test-app
          containerAppEnvironment: devops-app-env
          resourceGroup: devsecops-lab
          location: australiaeast
          targetPort: 5000

      # Wait for the app to deploy
      - name: Wait for provisioning to complete
        run: sleep 120  # Wait for 2 minutes

      # # List files in the workspace for debugging
      # - name: List files in workspace
      #   run: ls -R $GITHUB_WORKSPACE

      # # Get the deployed DAST app URL
      # - name: Get deployed DAST app URL
      #   run: |
      #     export FQDN=$(az containerapp show -n devops-test-app -g devsecops-lab --query properties.configuration.ingress.fqdn -o tsv)
      #     echo "TEST_APP_URL=https://$FQDN" >> $GITHUB_ENV
      #     echo "TEST_APP_URL=https://$FQDN"
      #     curl -L https://$FQDN/ui  # Follow redirects
      
      # - name: Check and update openapi3.yml
      #   run: |
      #       if [[ -f "$GITHUB_WORKSPACE/openapi_specs/openapi3.yml" ]]; then
      #         # Update the file with the new URL
      #         sed -i "s,http://localhost:5000,https://$FQDN,g" "$GITHUB_WORKSPACE/openapi_specs/openapi3.yml"
      #       else
      #         echo "openapi3.yml not found at $GITHUB_WORKSPACE/openapi_specs/openapi3.yml. Skipping sed operation."
      #       fi
        
      # # Perform the ZAP scan
      # - name: ZAP Scan
      #   uses: zaproxy/action-api-scan@v0.6.0
      #   with:
      #     token: ${{ secrets.GITHUB_TOKEN }}
      #     docker_name: 'ghcr.io/zaproxy/zaproxy:stable'
      #     format: openapi
      #     target: https://devops-test-app.victoriousbush-d2682a1f.australiaeast.azurecontainerapps.io/openapi_specs/openapi3.yml
      #     rules_file_name: .zap/rules.tsv
      #     cmd_options: '-a -c /zap/wrk/.zap/rules.tsv'
      #     fail_action: false
      #     allow_issue_writing: false

      # # Mount the GitHub workspace into the container
      # - name: Run ZAP in Docker with mounted files
      #   run: |
      #     docker run -v ${{ github.workspace }}:/zap/wrk/:rw --network=host ghcr.io/zaproxy/zaproxy:stable sh -c "ls -R /zap/wrk/"

      # # Upload the ZAP report
      # - name: Upload ZAP report
      #   id: artifact-zap
      #   uses: actions/upload-artifact@v4
      #   with:
      #     name: zap-report
      #     path: report_json.json
