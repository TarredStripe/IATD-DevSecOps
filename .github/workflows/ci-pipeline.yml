name: Python test and build
# Set it all up
on: [push]

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.x'
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
      - name: Test with pytest
        run: |
          pip install pytest pytest-cov
          pytest api_tests.py --doctest-modules --junitxml=junit/test-results.xml --cov=com --cov-report=xml --cov-report=html
      - name: Archive code coverage results
        uses: actions/upload-artifact@v4
        id: artifact-upload-step
        with:
          name: test-results
          path: junit/test-results.xml

  sonarqube:
    needs: test
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0  # Disable shallow clone for better SonarQube reporting
      - name: SonarQube Scan
        uses: sonarsource/sonarqube-scan-action@master
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          SONAR_HOST_URL: ${{ secrets.SONAR_URL }}
      - name: Download SonarQube report
        run: |
           sleep 30  # Increase if SonarQube takes longer to generate reports
           URL="${{ secrets.SONAR_URL }}/api/qualitygates/project_status?p=1&projectKey=devsecops-app&branch=main"
           echo "Report URL $URL"
           curl -u ${{ secrets.SONAR_TOKEN }}: "$URL" -o sonarqube-report.json
      - name: Upload SonarQube report
        id: artifact-sonarqube
        uses: actions/upload-artifact@v4
        with:
          name: sonarqube-report
          path: sonarqube-report.json

  dast:
    needs: [test, sonarqube]  # DAST runs after test and SonarQube
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      - name: Build and push DAST Docker image
        uses: docker/build-push-action@v5
        with:
          push: true
          tags: ${{ secrets.DOCKERHUB_USERNAME }}/devops-labs:dast-test

      - name: Get deployed API URL
        run: |
         export FQDN=$(az containerapp show -n devops-test-app -g devsecops-lab --query properties.configuration.ingress.fqdn -o tsv)
         echo "FQDN=$FQDN" >> $GITHUB_ENV
       
      - name: ZAP Scan with Debugging
        uses: zaproxy/action-api-scan@v0.6.0
        with:
         token: ${{ secrets.GITHUB_TOKEN }}
         docker_name: 'ghcr.io/zaproxy/zaproxy:stable'
         format: openapi
         target: https://$FQDN/openapi_specs/openapi3.yml  # Ensure this is correct
         rules_file_name: .zap/rules.tsv
         cmd_options: '-d -a -c /zap/wrk/.zap/rules.tsv'  # Enable debug mode to get more detailed logs
         fail_action: false
         allow_issue_writing: false
              
      - name: Upload ZAP report
        id: artifact-zap
        uses: actions/upload-artifact@v4
        with:
         name: zap-report
         path: report_json.json    

  build:
    needs: dast
    runs-on: ubuntu-latest
    steps:
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      - name: Build and push
        uses: docker/build-push-action@v5
        with:
          push: true
          tags: ${{ secrets.DOCKERHUB_USERNAME }}/devops-labs:latest

  # submit_results:
  #   needs: [build]
  #   runs-on: ubuntu-latest
  #   steps:
  #     - uses: actions/checkout@v4

  #     - uses: azure/login@v1
  #       with:
  #         creds: ${{ secrets.AZURE_CREDENTIALS }}

  #     - name: Azure CLI script
  #       run: |
  #         ACCESS_TOKEN=$(az account get-access-to
